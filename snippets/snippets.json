{
    "import": {
        "prefix": "imp",
        "body": "import ${2:moduleName} from '${1:module}'$0"
    },
    "importNoModuleName": {
        "prefix": "imn",
        "body": "import '${1:module}'$0"
    },
    "importDestructing": {
        "prefix": "imd",
        "body": "import { $2 } from '${1:module}'$0"
    },
    "importEverything": {
        "prefix": "ime",
        "body": "import * as ${2:alias} from '${1:module}'$0"
    },
    "importAs": {
        "prefix": "ima",
        "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
    },
    "exportDefault": {
        "prefix": "exp",
        "body": "export default $1$0"
    },
    "exportDestructing": {
        "prefix": "exd",
        "body": "export { $2 } from '${1:module}'$0"
    },
    "exportAs": {
        "prefix": "exa",
        "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
    },
    "exportNamedFunction": {
        "prefix": "enf",
        "body": [
            "export const ${1:functionName} = (${2:params}) => {",
            "\t$0",
            "}",
            ""
        ],
        "description": "Export named function in ES7 syntax"
    },
    "exportDefaultFunction": {
        "prefix": "edf",
        "body": [
            "export default (${1:params}) => {",
            "\t$0",
            "}",
            ""
        ],
        "description": "Export default function in ES7 syntax"
    },
    "forEach": {
        "prefix": "fre",
        "body": [
            "${1:array}.forEach(${2:currentItem} => {",
            "\t${0}",
            "})",
            ""
        ],
        "description": "Creates a forEach statement in ES7 syntax"
    },
    "forOf": {
        "prefix": "fof",
        "body": [
            "for(let ${1:item} of ${2:object}) {",
            "\t${0}",
            "}",
            ""
        ],
        "description": "Iterating over property names of iterable objects"
    },
    "forIn": {
        "prefix": "fin",
        "body": [
            "for(let ${1:item} in ${2:object}) {",
            "\t${0}",
            "}",
            ""
        ],
        "description": "Iterating over property values of iterable objects"
    },
    "anonymousFunction": {
        "prefix": "anfn",
        "body": [
            "(${1:params}) => {",
            "\t${2}",
            "}",
            ""
        ],
        "description": "Creates an anonymous function in ES7 syntax"
    },
    "namedFunction": {
        "prefix": "nfn",
        "body": [
            "const ${1:name} = (${2:params}) => {",
            "\t${3}",
            "}",
            ""
        ],
        "description": "Creates a named function in ES7 syntax"
    },
    "destructingObject": {
        "prefix": "dob",
        "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
        "description": "Creates and assigns a local variable using object destructing"
    },
    "destructingArray": {
        "prefix": "dar",
        "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
        "description": "Creates and assigns a local variable using array destructing"
    },
    "setInterval": {
        "prefix": "sti",
        "body": [
            "setInterval(() => {",
            "\t${2}",
            "}, ${0:intervalInms})",
            ""
        ],
        "description": "Executes the given function at specified intervals in ES7 syntax"
    },
    "setTimeOut": {
        "prefix": "sto",
        "body": [
            "setTimeout(() => {",
            "\t${2}",
            "}, ${1:delayInms})",
            ""
        ],
        "description": "Executes the given function after the specified delay in ES7 syntax"
    },
    "consoleAssert": {
        "prefix": "cas",
        "body": "console.assert(${1:expression}, ${2:object})",
        "description": "If the specified expression is false, the message is written to the console along with a stack trace"
    },
    "consoleClear": {
        "prefix": "ccl",
        "body": "console.clear()",
        "description": "Clears the console"
    },
    "consoleCount": {
        "prefix": "cco",
        "body": "console.count(${1:label})",
        "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
    },
    "consoleDir": {
        "prefix": "cdi",
        "body": "console.dir(${1:object})",
        "description": "Prints a JavaScript representation of the specified object"
    },
    "consoleError": {
        "prefix": "cer",
        "body": "console.error(${1:object})",
        "description": "Displays a message in the console and also includes a stack trace from where the method was called"
    },
    "consoleGroup": {
        "prefix": "cgr",
        "body": "console.group(\"${1:label}\")",
        "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
    },
    "consoleGroupEnd": {
        "prefix": "cge",
        "body": "console.groupEnd()",
        "description": "Closes out the corresponding console.group()."
    },
    "consoleLog": {
        "prefix": "clg",
        "body": "console.log(${1:object})",
        "description": "Displays a message in the console"
    },
    "consoleTrace": {
        "prefix": "ctr",
        "body": "console.trace(${1:object})",
        "description": "Prints a stack trace from the point where the method was called"
    },
    "consoleLogObject": {
        "prefix": "clo",
        "body": "console.log('${1:object}', ${1:object})",
        "description": "Logs property with name."
    },
    "consoleTime": {
        "prefix": "ctm",
        "body": "console.time('${1:object}')",
        "description": "Console time wrapper"
    },
    "consoleTimeEnd": {
        "prefix": "cte",
        "body": "console.timeEnd('${1:object}')",
        "description": "Console time end wrapper"
    },
    "consoleWarn": {
        "prefix": "cwa",
        "body": "console.warn(${1:object})",
        "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
    },
    "consoleInfo": {
        "prefix": "cin",
        "body": "console.info(${1:object})",
        "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
    },
    "import React": {
        "prefix": "imr",
        "body": [
            "import React from 'react'",
            ""
        ]
    },
    "import React, { Component }": {
        "prefix": "imrc",
        "body": [
            "import React, { Component } from 'react'",
            ""
        ]
    },
    "import React, { PureComponent }": {
        "prefix": "imrpc",
        "body": [
            "import React, { PureComponent } from 'react'",
            ""
        ]
    },
    "import React, { memo }": {
        "prefix": "imrm",
        "body": [
            "import React, { memo } from 'react'",
            ""
        ]
    },
    "react hook with memo": {
        "prefix": "rnhm",
        "body": [
            "import React, { memo } from 'react'",
            "import { View, Text } from 'react-native'",
            "",
            "const ${1:TM_FILENAME_BASE}Component = () => {",
            "    return (",
            "        <View>",
            "            <Text></Text>",
            "        </View>",
            "    )",
            "}",
            "",
            "export default ${1:TM_FILENAME_BASE} = memo(${1:TM_FILENAME_BASE}Component,${2:isEqual})"
        ]
    },
    "react hook with memo , style ": {
        "prefix": "rnhms",
        "body": [
            "import React, { memo } from 'react'",
            "import { View, Text } from 'react-native'",
            "",
            "const styles = StyleSheet.create({",
            "",
            "  });",
            "",
            "const ${1:TM_FILENAME_BASE}Component = () => {",
            "    return (",
            "        <View>",
            "            <Text></Text>",
            "        </View>",
            "    )",
            "}",
            "",
            "export default ${1:TM_FILENAME_BASE} = memo(${1:TM_FILENAME_BASE}Component,${2:isEqual})"
        ]
    }
}